% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/flatten_one.r
\name{flattenj_one}
\alias{flattenj_one}
\title{Single JSON object flatten}
\usage{
flattenj_one(dat, sep = "@", compact = TRUE)
}
\arguments{
\item{dat}{\code{list}. The list from a JSON object.}

\item{sep}{\code{character}. A character/string used to separate keys in the nesting path.
Defaults to @ to avoid the occasional overriding. Not allowed to use some risky words like . and \.
When \code{compact=FALSE}, it is unnecessary to assign \code{sep} explicitly, unless @ has been used in the key fields.}

\item{compact}{logical. Whether to generate the compact or completely expanded data frame. Defaults to \code{TRUE}.}
}
\value{
\code{data frame}. The flattened result.
}
\description{
Transform a JSON object into a flattened data frame.
}
\details{
The function can flatten a JSON object whose length is one, into a new data frame.
The data frame has two different schemas according to the \code{compact} value.
For \code{compact=TRUE}, the data frame contains two columns. One is \code{paths} which stores the absolute path of each record.
And the other is \code{values} which stores the corresponding values of each path.
For \code{compact=FALSE}, the data frame has more columns based on the global nesting situation.
It actually applies the serialization way for flattening, which means the early values correspondingly appear in the heading rows of the data frame.
And if the value is a list object in the original data or a non-named list/vector in the R environment,
the path will correspondingly be appended with a integer to specify each list element.
For example, in the raw JSON file, "\{'a':[1, 2, 3]\}" will be \code{list('a1'=1, 'a2'=2, 'a3'=3)}.
Great credits to the author of \code{rlist}, \href{https://github.com/renkun-ken/rlist/blob/master/R/list.flatten.R}{Kun Ren}.
}
\examples{
library(mojson)
j = list(a=list(x=1,y=2),b=c(3,4,list(z=5,s=6,t=list(m=7,n=8))))
flattenj_one(j)
flattenj_one(j, compact=F)

}
\seealso{
\code{\link{expanddf}}.
}
